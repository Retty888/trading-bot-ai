from telegram import Update
from telegram.ext import ContextTypes
from analyzer import run_swing_analysis
from formatting import format_signals_vertical
from utils.trade_logger import log_signal
from datetime import datetime

# üéØ –ö–æ–º–∞–Ω–¥–∞ /swing ‚Äî —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ (1h, 4h, 1d)
async def handle_swing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        summary_line, signals = await run_swing_analysis()

        if not signals or all(s is None for s in signals):
            await update.message.reply_text("‚ö†Ô∏è Swing —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        signals = [s for s in signals if s is not None]

        formatted = format_signals_vertical(signals, strategy_name="Swing")
        await update.message.reply_text(f"{summary_line}\n\n{formatted}", parse_mode="HTML")

        # ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for signal in signals:
            signal.update({
                "timestamp": signal.get("timestamp", datetime.utcnow().isoformat()),
                "timeframe": signal.get("timeframe", "1h"),  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "signal_score": signal.get("signal_score", 4),
                "quality_score": signal.get("quality_score", 0),
                "weak": signal.get("weak", False),
                "result": signal.get("result", "")
            })
            log_signal(signal)

    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –≤ handle_swing: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Swing-—Å–∏–≥–Ω–∞–ª–æ–≤.")
