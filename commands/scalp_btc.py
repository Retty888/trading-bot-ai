from telegram import Update
from telegram.ext import ContextTypes
from analyzer import run_scalp_analysis
from formatting import format_signals_vertical
from utils.trade_logger import log_signal
from data_fetcher import fetch_all_intervals
from datetime import datetime

# üìà –ö–æ–º–∞–Ω–¥–∞ /scalp_btc ‚Äî —Å–∫–∞–ª—å–ø–∏–Ω–≥ BTC –Ω–∞ –æ—Å–Ω–æ–≤–µ 5m/15m —Å–≤–µ—á–µ–π
async def handle_scalp_btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        fetch_all_intervals(symbols=["BTCUSDT"], intervals=["1m", "5m", "15m"])

        # üìä –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        summary_line, signals = await run_scalp_analysis(symbols=["BTCUSDT"])

        if not signals or all(s is None for s in signals):
            await update.message.reply_text("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        signals = [s for s in signals if s is not None]
        formatted = format_signals_vertical(signals, strategy_name="–°–∫–∞–ª—å–ø–∏–Ω–≥ BTC")
        await update.message.reply_text(f"{summary_line}\n\n{formatted}", parse_mode="HTML")

        # ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in signals:
            signal.update({
                "timestamp": signal.get("timestamp", datetime.utcnow().isoformat()),
                "timeframe": signal.get("timeframe", "5m"),
                "signal_score": signal.get("signal_score", 4),
                "quality_score": signal.get("quality_score", 0),
                "weak": signal.get("weak", False),
                "result": signal.get("result", "")
            })
            log_signal(signal)

    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –≤ handle_scalp_btc: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤.")
