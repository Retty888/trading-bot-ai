import pandas as pd
import traceback
from analysis_utils import generate_trade_ideas
from data_fetcher import fetch_all_intervals

def analyze_market(candles_dict, swing_mode=False):
    signals = []
    if not candles_dict:
        print("[‚ùå] analyze_market –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
        return signals

    for symbol, timeframes in candles_dict.items():
        if not timeframes:
            print(f"[‚ö†Ô∏è] –ü—Ä–æ–ø—É—â–µ–Ω {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
            continue
        for tf, df in timeframes.items():
            if not isinstance(df, pd.DataFrame) or df.empty:
                print(f"[‚ö†Ô∏è] –ü—Ä–æ–ø—É—â–µ–Ω {symbol} –Ω–∞ {tf}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DataFrame")
                continue
            try:
                result = generate_trade_ideas(symbol, df, swing_mode=swing_mode)
                if result is not None:
                    result["timeframe"] = tf
                    signals.append(result)
            except Exception as e:
                print(f"[‚ùå] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} –Ω–∞ {tf}")
                traceback.print_exc()
    return signals

def run_signals_analysis(symbols=None):
    try:
        candles_dict = fetch_all_intervals(symbols=symbols, intervals=["15m", "1h", "4h", "1d"])
        if candles_dict is None:
            print("[‚ùå] fetch_all_intervals –≤–µ—Ä–Ω—É–ª None")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", []

        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
        signals = analyze_market(candles_dict)
        summary_line = "üìä –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω."
        return summary_line, signals
    except Exception as e:
        print("[‚ùå] –û—à–∏–±–∫–∞ –≤ run_signals_analysis")
        traceback.print_exc()
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", []

async def run_scalp_analysis(symbols=None):
    try:
        candles_dict = fetch_all_intervals(symbols=symbols, intervals=["1m", "5m", "15m", "1h"])

        if candles_dict is None:
            print("[‚ùå] fetch_all_intervals –≤–µ—Ä–Ω—É–ª None –≤ run_scalp_analysis")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", []

        print(f"üîç –°–∫–∞–ª—å–ø–∏–Ω–≥-–∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
        signals = analyze_market(candles_dict)
        summary_line = "üìà –°–∫–∞–ª—å–ø–∏–Ω–≥-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω."
        return summary_line, signals
    except Exception as e:
        print("[‚ùå] –û—à–∏–±–∫–∞ –≤ run_scalp_analysis")
        traceback.print_exc()
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", []

async def run_swing_analysis(symbols=None):
    try:
        candles_dict = fetch_all_intervals(symbols=symbols, intervals=["1h", "4h", "1d"])
        print(f"üîç Swing-–∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
        signals = analyze_market(candles_dict, swing_mode=True)
        summary_line = "üéØ Swing –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω."
        return summary_line, signals
    except Exception as e:
        print("[‚ùå] –û—à–∏–±–∫–∞ –≤ run_swing_analysis")
        traceback.print_exc()
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", []
