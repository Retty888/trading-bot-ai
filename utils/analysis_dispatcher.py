# utils/analysis_dispatcher.py

import pandas as pd
from analysis_utils import generate_trade_ideas
from data_fetcher import fetch_all_intervals
from utils.results_logger import log_result
from utils.trade_logger import log_signal
from utils.signal_ranker import rank_signal
from utils.plot_signal_chart import plot_trade_signal
from utils.generate_pending_trade_ideas import generate_pending_trade_ideas

def run_signals_analysis(
    swing_mode: bool = False,
    symbols: list = None,
    intervals: list = None,
    limit: int = 500
):
    if symbols is None:
        symbols = ["BTCUSDT", "ETHUSDT"]
    if intervals is None:
        intervals = ["15m", "30m", "1h"] if not swing_mode else ["1h", "4h", "1d"]

    print(f"[‚öôÔ∏è] –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è: {symbols} ({intervals})")
    candles_dict = fetch_all_intervals(symbols, intervals)

    if not candles_dict:
        print("[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏")
        return []

    print(f"[üìä] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
    signals = generate_trade_ideas(candles_dict, swing_mode=swing_mode)

    if not signals:
        print("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.")
        pending = generate_pending_trade_ideas(candles_dict)
        return pending

    ranked = rank_signal(signals)

    for signal in ranked:
        log_signal(signal)
        plot_trade_signal(signal)

    return ranked
