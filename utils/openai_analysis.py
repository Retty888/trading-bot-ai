import requests
from datetime import datetime, timedelta
from indicators.vumanchu_cipher import compute_vumanchu

def get_openai_usage(api_key):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        end_date = datetime.utcnow().date()
        start_date = end_date - timedelta(days=30)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d')

        # –ó–∞–ø—Ä–æ—Å –∫ API OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        url = f"https://api.openai.com/v1/dashboard/billing/usage?start_date={start_date_str}&end_date={end_date_str}"
        headers = {
            "Authorization": f"Bearer {api_key}"
        }

        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {response.status_code} - {response.text}"

        data = response.json()
        total_usage = data.get("total_usage", 0)
        total_usage_dollars = total_usage / 100.0  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä—ã

        return f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${total_usage_dollars:.2f}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {str(e)}"

import openai
import os

openai.api_key = os.getenv("OPENAI_API_KEY")

def get_openai_analysis(prompt: str) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ö—Ä–∞—Ç–∫–æ –æ—Ü–µ–Ω–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=60
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        print(f"[AI ERROR] {e}")
        return "‚ùå AI –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
