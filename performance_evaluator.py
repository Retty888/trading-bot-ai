import pandas as pd
import os

SIGNAL_LOG_PATH = "logs/signal_log.csv"
STATS_OUTPUT_PATH = "logs/signal_stats.csv"

def evaluate_all_signals():
    if not os.path.exists(SIGNAL_LOG_PATH):
        return "‚ö†Ô∏è –õ–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    df = pd.read_csv(SIGNAL_LOG_PATH)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    if "result" not in df.columns or "reasoning" not in df.columns:
        return "‚ö†Ô∏è –í –ª–æ–≥–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (result / reasoning)."

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    df["result"] = df["result"].astype(str).str.upper()
    df = df[df["result"].isin(["TP", "SL"])]
    df["successful"] = df["result"] == "TP"

    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    features = [
        "EMA", "MACD", "RSI", "ADX", "VWAP", "OBV", 
        "Supertrend", "–ü–∞—Ç—Ç–µ—Ä–Ω", "–æ–±—ä—ë–º–Ω–æ–π –∑–æ–Ω—ã"
    ]

    stats = []
    for feat in features:
        subset = df[df["reasoning"].str.contains(feat, na=False)]
        total = len(subset)
        if total == 0:
            continue
        success_rate = subset["successful"].mean()
        stats.append({
            "feature": feat,
            "signals": total,
            "success_rate": round(success_rate * 100, 2)
        })

    if not stats:
        return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."

    stats_df = pd.DataFrame(stats)
    stats_df.sort_values(by="success_rate", ascending=False, inplace=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV
    os.makedirs(os.path.dirname(STATS_OUTPUT_PATH), exist_ok=True)
    stats_df.to_csv(STATS_OUTPUT_PATH, index=False)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    message_lines = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</b>\n"]
    for _, row in stats_df.iterrows():
        message_lines.append(
            f"‚Ä¢ <b>{row['feature']}</b>: {row['success_rate']}% (–∏–∑ {row['signals']})"
        )

    return "\n".join(message_lines)
